// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '8.0.1' apply false
    id 'com.android.library' version '8.0.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.10' apply false
    id 'io.gitlab.arturbosch.detekt' version '1.22.0' apply false
    id 'com.google.dagger.hilt.android' version '2.44' apply false

    // Jacoco
    id 'jacoco'
}


subprojects {
    apply plugin: 'jacoco'
    apply plugin: 'io.gitlab.arturbosch.detekt'

    afterEvaluate {
        android {
            testOptions {
                buildTypes {
                    // Jacoco config: It configures/enables createDebugCoverageReport task to be used in codeCoverage task below
                    debug.testCoverageEnabled = true
                }
            }

            // Jacoco options: https://docs.gradle.org/current/userguide/jacoco_plugin.html#default_values_of_the_jacoco_task_extension
            tasks.register('codeCoverage', JacocoReport) {
                dependsOn 'testDebugUnitTest', 'createDebugCoverageReport' // run unit tests and ui tests to generate code coverage report
                reports {
                    html.required.set(true)
                    html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
                    xml.required.set(true) // It's required for Sonar
                    xml.outputLocation.set(file("${project.buildDir}/reports/jacoco/jacoco.xml"))
                }
                def mainSrc = "${project.projectDir}/src/main/java"
                def kotlinTree = fileTree(
                        dir: "$project.buildDir/tmp/kotlin-classes/debug",
                        excludes: [
                                '**/BuildConfig.*',
                                '**/*$*',
                                '**/Hilt_*.class',
                                'hilt_**',
                                'dagger/hilt/**',
                                '**/*JsonAdapter.*'
                        ]
                )
                sourceDirectories.from = file(mainSrc)
                classDirectories.from = files(kotlinTree)
                executionData.from = fileTree(dir: project.buildDir, includes: [
                        '**/*.exec', // unit tests
                        '**/*.ec' // ui tests
                ])
            }
        }
    }

    // Detekt options: https://detekt.dev/docs/gettingstarted/gradle#groovy-dsl-3
    detekt {
        parallel = true
        allRules = true
        autoCorrect = true
        buildUponDefaultConfig = true
        setSource(files(projectDir))
        config.setFrom(file("${rootProject.rootDir}/config/detekt.yml"))
    }

    // Jacoco version: https://docs.gradle.org/current/userguide/jacoco_plugin.html#sec:configuring_the_jacoco_plugin
    jacoco {
        toolVersion = "0.8.10"
    }

    // Jacoco test options: https://docs.gradle.org/current/userguide/jacoco_plugin.html#default_values_of_the_jacoco_task_extension
    tasks.withType(Test) {
        jacoco {
            includeNoLocationClasses = true // Robolectric support
            excludes = ['jdk.internal.*'] // Java compatibility
        }
    }
}